pipeline {
    agent any

    environment {
        AWS_REGION = "us-east-2"
        AWS_ACCOUNT_ID = "109398616914"
        ECR_REPO = "hanu-python-app"
        IMAGE_TAG = "${BUILD_NUMBER}"
        ECR_IMAGE = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}"
        K8S_DEPLOYMENT = "hanu-python-deployment"   // existing deployment name in EKS
        K8S_NAMESPACE = "default"                   // change if your app runs in another namespace
        EKS_CLUSTER = "education-eks-0D8C2Vur"       // replace with actual cluster name
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/hanumantharao19/sample-python-app.git'
            }
        }

        stage('Authenticate with AWS & ECR') {
            steps {
                script {
                    sh """
                        aws configure set region ${AWS_REGION}
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                        docker build -t ${ECR_IMAGE}:${IMAGE_TAG} .
                    """
                }
            }
        }

        stage('Push to AWS ECR') {
            steps {
                script {
                    sh """
                        docker push ${ECR_IMAGE}:${IMAGE_TAG}
                        docker tag ${ECR_IMAGE}:${IMAGE_TAG} ${ECR_IMAGE}:latest
                        docker push ${ECR_IMAGE}:latest
                    """
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    sh """
                        # Configure kubectl to talk to your EKS cluster
                        aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER}

                        # Update the image in the deployment
                        kubectl set image deployment/${K8S_DEPLOYMENT} ${K8S_DEPLOYMENT}=${ECR_IMAGE}:${IMAGE_TAG} -n ${K8S_NAMESPACE}

                        # Wait for rollout to complete
                        kubectl rollout status deployment/${K8S_DEPLOYMENT} -n ${K8S_NAMESPACE}
                    """
                }
            }
        }
    }

    post {
        success {
            echo "✅ Successfully built, pushed, and deployed: ${ECR_IMAGE}:${IMAGE_TAG}"
        }
        failure {
            echo "❌ Build or deployment failed! Check logs above."
        }
    }
}
